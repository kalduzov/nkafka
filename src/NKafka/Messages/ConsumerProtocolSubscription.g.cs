//  This is an independent project of an individual developer. Dear PVS-Studio, please check it.
// 
//  PVS-Studio Static Code Analyzer for C, C++, C#, and Java: https://pvs-studio.com
// 
//  Copyright ©  2022 Aleksey Kalduzov. All rights reserved
// 
//  Author: Aleksey Kalduzov
//  Email: alexei.kalduzov@gmail.com
// 
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
// 
//      https://www.apache.org/licenses/LICENSE-2.0
// 
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
// <auto-generated> THIS CODE IS AUTOMATICALLY GENERATED.  DO NOT EDIT. </auto-generated>

// ReSharper disable RedundantUsingDirective
// ReSharper disable UnusedType.Global
// ReSharper disable UnusedMember.Global
// ReSharper disable ClassNeverInstantiated.Global
// ReSharper disable PartialTypeWithSinglePart

#nullable enable

using NKafka.Exceptions;
using NKafka.Protocol;
using NKafka.Protocol.Buffers;
using NKafka.Protocol.Extensions;
using NKafka.Protocol.Records;
using System.Text;

namespace NKafka.Messages;

/// <summary>
/// Describes the contract for message ConsumerProtocolSubscription
/// </summary>
public sealed partial class ConsumerProtocolSubscription: IMessage, IEquatable<ConsumerProtocolSubscription>
{
    /// <inheritdoc />
    public List<TaggedField>? UnknownTaggedFields { get; set; } = null;

    /// <inheritdoc />
    public int IncomingBufferLength { get; private set; } = 0;

    /// <summary>
    /// 
    /// </summary>
    public List<string> Topics { get; set; } = new ();

    /// <summary>
    /// 
    /// </summary>
    public byte[]? UserData { get; set; } = null;

    /// <summary>
    /// 
    /// </summary>
    public TopicPartitionCollection OwnedPartitions { get; set; } = new ();

    /// <summary>
    /// 
    /// </summary>
    public int GenerationId { get; set; } = -1;

    /// <summary>
    /// 
    /// </summary>
    public string? RackId { get; set; } = null;

    /// <summary>
    /// The basic constructor of the message ConsumerProtocolSubscription
    /// </summary>
    public ConsumerProtocolSubscription()
    {
    }

    /// <summary>
    /// Base constructor for deserializing message ConsumerProtocolSubscription
    /// </summary>
    public ConsumerProtocolSubscription(ref BufferReader reader, ApiVersion version)
        : this()
    {
        IncomingBufferLength = reader.Length;
        Read(ref reader, version);
    }

    /// <inheritdoc />
    public void Read(ref BufferReader reader, ApiVersion version)
    {
        {
            int arrayLength;
            arrayLength = reader.ReadInt();
            if (arrayLength < 0)
            {
                throw new Exception("non-nullable field Topics was serialized as null");
            }
            else
            {
                var newCollection = new List<string>(arrayLength);
                for (var i = 0; i < arrayLength; i++)
                {
                    int length;
                    length = reader.ReadShort();
                    if (length < 0)
                    {
                        throw new Exception("non-nullable field Topics element was serialized as null");
                    }
                    else if (length > 0x7fff)
                    {
                        throw new Exception($"string field Topics element had invalid length {length}");
                    }
                    else
                    {
                        newCollection.Add(reader.ReadString(length));
                    }
                }
                Topics = newCollection;
            }
        }
        {
            int length;
            length = reader.ReadInt();
            if (length < 0)
            {
                UserData = null;
            }
            else
            {
                UserData = reader.ReadBytes(length);
            }
        }
        if (version >= ApiVersion.Version1)
        {
            int arrayLength;
            arrayLength = reader.ReadInt();
            if (arrayLength < 0)
            {
                throw new Exception("non-nullable field OwnedPartitions was serialized as null");
            }
            else
            {
                var newCollection = new TopicPartitionCollection(arrayLength);
                for (var i = 0; i < arrayLength; i++)
                {
                    newCollection.Add(new TopicPartitionMessage(ref reader, version));
                }
                OwnedPartitions = newCollection;
            }
        }
        else
        {
            OwnedPartitions = new ();
        }
        if (version >= ApiVersion.Version2)
        {
            GenerationId = reader.ReadInt();
        }
        else
        {
            GenerationId = -1;
        }
        if (version >= ApiVersion.Version3)
        {
            int length;
            length = reader.ReadShort();
            if (length < 0)
            {
                RackId = null;
            }
            else if (length > 0x7fff)
            {
                throw new Exception($"string field RackId had invalid length {length}");
            }
            else
            {
                RackId = reader.ReadString(length);
            }
        }
        else
        {
            RackId = null;
        }
        UnknownTaggedFields = null;
    }

    /// <inheritdoc />
    public void Write(BufferWriter writer, ApiVersion version)
    {
        var numTaggedFields = 0;
        writer.WriteInt(Topics.Count);
        foreach (var element in Topics)
        {
            {
                var stringBytes = Encoding.UTF8.GetBytes(element);
                writer.WriteShort((short)stringBytes.Length);
                writer.WriteBytes(stringBytes);
            }
        }
        if (UserData is null)
        {
            writer.WriteInt(-1);
        }
        else
        {
            writer.WriteInt(UserData.Length);
            writer.WriteBytes(UserData);
        }
        if (version >= ApiVersion.Version1)
        {
            writer.WriteInt(OwnedPartitions.Count);
            foreach (var element in OwnedPartitions)
            {
                element.Write(writer, version);
            }
        }
        if (version >= ApiVersion.Version2)
        {
            writer.WriteInt(GenerationId);
        }
        if (version >= ApiVersion.Version3)
        {
            if (RackId is null)
            {
                writer.WriteShort(-1);
            }
            else
            {
                var stringBytes = Encoding.UTF8.GetBytes(RackId);
                writer.WriteShort((short)stringBytes.Length);
                writer.WriteBytes(stringBytes);
            }
        }
        var rawWriter = RawTaggedFieldWriter.ForFields(UnknownTaggedFields);
        numTaggedFields += rawWriter.FieldsCount;
        if (numTaggedFields > 0)
        {
            throw new UnsupportedVersionException($"Tagged fields were set, but version {version} of this message does not support them.");
        }
    }

    /// <inheritdoc />
    public override bool Equals(object? obj)
    {
        return ReferenceEquals(this, obj) || obj is ConsumerProtocolSubscription other && Equals(other);
    }

    /// <inheritdoc />
    public bool Equals(ConsumerProtocolSubscription? other)
    {
        if (other is null)
        {
            return false;
        }
        if (Topics is null)
        {
            if (other.Topics is not null)
            {
                return false;
            }
        }
        else
        {
            if (!Topics.SequenceEqual(other.Topics))
            {
                return false;
            }
        }
        if (!UserData.SequenceEqual(other.UserData))
        {
            return false;
        }
        if (OwnedPartitions is null)
        {
            if (other.OwnedPartitions is not null)
            {
                return false;
            }
        }
        else
        {
            if (!OwnedPartitions.SequenceEqual(other.OwnedPartitions))
            {
                return false;
            }
        }
        if (GenerationId != other.GenerationId)
        {
            return false;
        }
        if (RackId is null)
        {
            if (other.RackId is not null)
            {
                return false;
            }
        }
        else
        {
            if (!RackId.Equals(other.RackId))
            {
                return false;
            }
        }
        return UnknownTaggedFields.CompareRawTaggedFields(other.UnknownTaggedFields);
    }

    /// <inheritdoc />
    public override int GetHashCode()
    {
        var hashCode = 0;
        hashCode = HashCode.Combine(hashCode, Topics, UserData, OwnedPartitions, GenerationId, RackId);
        return hashCode;
    }

    /// <inheritdoc />
    public override string ToString()
    {
        return "ConsumerProtocolSubscription("
            + "Topics=" + Topics.DeepToString()
            + ", UserData=" + (UserData is null ? "null" : UserData.DeepToString())
            + ", OwnedPartitions=" + OwnedPartitions.DeepToString()
            + ", GenerationId=" + GenerationId
            + ", RackId=" + (string.IsNullOrWhiteSpace(RackId) ? "null" : RackId)
            + ")";
    }

    /// <summary>
    /// Describes the contract for message TopicPartitionMessage
    /// </summary>
    public sealed partial class TopicPartitionMessage: IMessage, IEquatable<TopicPartitionMessage>
    {
        /// <inheritdoc />
        public List<TaggedField>? UnknownTaggedFields { get; set; } = null;

        /// <inheritdoc />
        public int IncomingBufferLength { get; private set; } = 0;

        /// <summary>
        /// 
        /// </summary>
        public string Topic { get; set; } = string.Empty;

        /// <summary>
        /// 
        /// </summary>
        public List<int> Partitions { get; set; } = new ();

        /// <summary>
        /// The basic constructor of the message TopicPartitionMessage
        /// </summary>
        public TopicPartitionMessage()
        {
        }

        /// <summary>
        /// Base constructor for deserializing message TopicPartitionMessage
        /// </summary>
        public TopicPartitionMessage(ref BufferReader reader, ApiVersion version)
            : this()
        {
            IncomingBufferLength = reader.Length;
            Read(ref reader, version);
        }

        /// <inheritdoc />
        public void Read(ref BufferReader reader, ApiVersion version)
        {
            if (version > ApiVersion.Version3)
            {
                throw new UnsupportedVersionException($"Can't read version {version} of TopicPartitionMessage");
            }
            {
                int length;
                length = reader.ReadShort();
                if (length < 0)
                {
                    throw new Exception("non-nullable field Topic was serialized as null");
                }
                else if (length > 0x7fff)
                {
                    throw new Exception($"string field Topic had invalid length {length}");
                }
                else
                {
                    Topic = reader.ReadString(length);
                }
            }
            {
                int arrayLength;
                arrayLength = reader.ReadInt();
                if (arrayLength < 0)
                {
                    throw new Exception("non-nullable field Partitions was serialized as null");
                }
                else
                {
                    var newCollection = new List<int>(arrayLength);
                    for (var i = 0; i < arrayLength; i++)
                    {
                        newCollection.Add(reader.ReadInt());
                    }
                    Partitions = newCollection;
                }
            }
            UnknownTaggedFields = null;
        }

        /// <inheritdoc />
        public void Write(BufferWriter writer, ApiVersion version)
        {
            if (version < ApiVersion.Version1)
            {
                throw new UnsupportedVersionException($"Can't write version {version} of TopicPartitionMessage");
            }
            var numTaggedFields = 0;
            {
                var stringBytes = Encoding.UTF8.GetBytes(Topic);
                writer.WriteShort((short)stringBytes.Length);
                writer.WriteBytes(stringBytes);
            }
            writer.WriteInt(Partitions.Count);
            foreach (var element in Partitions)
            {
                writer.WriteInt(element);
            }
            var rawWriter = RawTaggedFieldWriter.ForFields(UnknownTaggedFields);
            numTaggedFields += rawWriter.FieldsCount;
            if (numTaggedFields > 0)
            {
                throw new UnsupportedVersionException($"Tagged fields were set, but version {version} of this message does not support them.");
            }
        }

        /// <inheritdoc />
        public override bool Equals(object? obj)
        {
            return ReferenceEquals(this, obj) || obj is TopicPartitionMessage other && Equals(other);
        }

        /// <inheritdoc />
        public bool Equals(TopicPartitionMessage? other)
        {
            if (other is null)
            {
                return false;
            }
            if (Topic is null)
            {
                if (other.Topic is not null)
                {
                    return false;
                }
            }
            else
            {
                if (!Topic.Equals(other.Topic))
                {
                    return false;
                }
            }
            if (Partitions is null)
            {
                if (other.Partitions is not null)
                {
                    return false;
                }
            }
            else
            {
                if (!Partitions.SequenceEqual(other.Partitions))
                {
                    return false;
                }
            }
            return UnknownTaggedFields.CompareRawTaggedFields(other.UnknownTaggedFields);
        }

        /// <inheritdoc />
        public override int GetHashCode()
        {
            var hashCode = 0;
            hashCode = HashCode.Combine(hashCode, Topic);
            return hashCode;
        }

        /// <inheritdoc />
        public override string ToString()
        {
            return "TopicPartitionMessage("
                + "Topic=" + (string.IsNullOrWhiteSpace(Topic) ? "null" : Topic)
                + ", Partitions=" + Partitions.DeepToString()
                + ")";
        }
    }

    /// <summary>
    /// Describes the contract for message TopicPartitionCollection
    /// </summary>
    public sealed partial class TopicPartitionCollection: HashSet<TopicPartitionMessage>
    {
        /// <summary>
        /// Basic collection constructor
        /// </summary>
        public TopicPartitionCollection()
        {
        }

        /// <summary>
        /// Basic collection constructor with the ability to set capacity
        /// </summary>
        public TopicPartitionCollection(int capacity)
            : base(capacity)
        {
        }
        /// <inheritdoc />
        public override bool Equals(object? obj)
        {
            return SetEquals((IEnumerable<TopicPartitionMessage>)obj);
        }
    }
}
