//  This is an independent project of an individual developer. Dear PVS-Studio, please check it.
// 
//  PVS-Studio Static Code Analyzer for C, C++, C#, and Java: https://pvs-studio.com
// 
//  Copyright ©  2022 Aleksey Kalduzov. All rights reserved
// 
//  Author: Aleksey Kalduzov
//  Email: alexei.kalduzov@gmail.com
// 
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
// 
//      https://www.apache.org/licenses/LICENSE-2.0
// 
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
// <auto-generated> THIS CODE IS AUTOMATICALLY GENERATED.  DO NOT EDIT. </auto-generated>

// ReSharper disable RedundantUsingDirective
// ReSharper disable UnusedType.Global
// ReSharper disable UnusedMember.Global
// ReSharper disable ClassNeverInstantiated.Global
// ReSharper disable PartialTypeWithSinglePart

#nullable enable

using NKafka.Exceptions;
using NKafka.Protocol;
using NKafka.Protocol.Extensions;
using NKafka.Protocol.Records;
using System.Text;

namespace NKafka.Messages;

public sealed partial class SaslHandshakeRequestMessage: IRequestMessage, IEquatable<SaslHandshakeRequestMessage>
{
    /// <inheritdoc />
    public ApiKeys ApiKey => ApiKeys.SaslHandshake;

    public const bool ONLY_CONTROLLER = true;

    /// <inheritdoc />
    public bool OnlyController => ONLY_CONTROLLER;

    public List<TaggedField>? UnknownTaggedFields { get; set; } = null;

    /// <summary>
    /// The SASL mechanism chosen by the client.
    /// </summary>
    public string Mechanism { get; set; } = string.Empty;

    public SaslHandshakeRequestMessage()
    {
    }

    public SaslHandshakeRequestMessage(BufferReader reader, ApiVersion version)
        : this()
    {
        Read(reader, version);
    }

    public void Read(BufferReader reader, ApiVersion version)
    {
        {
            int length;
            length = reader.ReadShort();
            if (length < 0)
            {
                throw new Exception("non-nullable field Mechanism was serialized as null");
            }
            else if (length > 0x7fff)
            {
                throw new Exception($"string field Mechanism had invalid length {length}");
            }
            else
            {
                Mechanism = reader.ReadString(length);
            }
        }
        UnknownTaggedFields = null;
    }

    public void Write(BufferWriter writer, ApiVersion version)
    {
        var numTaggedFields = 0;
        {
            var stringBytes = Encoding.UTF8.GetBytes(Mechanism);
            writer.WriteShort((short)stringBytes.Length);
            writer.WriteBytes(stringBytes);
        }
        var rawWriter = RawTaggedFieldWriter.ForFields(UnknownTaggedFields);
        numTaggedFields += rawWriter.FieldsCount;
        if (numTaggedFields > 0)
        {
            throw new UnsupportedVersionException($"Tagged fields were set, but version {version} of this message does not support them.");
        }
    }

    public override bool Equals(object? obj)
    {
        return ReferenceEquals(this, obj) || obj is SaslHandshakeRequestMessage other && Equals(other);
    }

    public bool Equals(SaslHandshakeRequestMessage? other)
    {
        if (other is null)
        {
            return false;
        }
        if (Mechanism is null)
        {
            if (other.Mechanism is not null)
            {
                return false;
            }
        }
        else
        {
            if (!Mechanism.Equals(other.Mechanism))
            {
                return false;
            }
        }
        return UnknownTaggedFields.CompareRawTaggedFields(other.UnknownTaggedFields);
    }

    public override int GetHashCode()
    {
        var hashCode = 0;
        hashCode = HashCode.Combine(hashCode, Mechanism);
        return hashCode;
    }

    public override string ToString()
    {
        return "SaslHandshakeRequestMessage("
            + "Mechanism=" + (string.IsNullOrWhiteSpace(Mechanism) ? "null" : Mechanism)
            + ")";
    }
}
