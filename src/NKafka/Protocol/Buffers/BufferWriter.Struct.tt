<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>

//  This is an independent project of an individual developer. Dear PVS-Studio, please check it.
// 
//  PVS-Studio Static Code Analyzer for C, C++, C#, and Java: https://pvs-studio.com
// 
//  Copyright Â©  2023 Aleksey Kalduzov. All rights reserved
// 
//  Author: Aleksey Kalduzov
//  Email: alexei.kalduzov@gmail.com
// 
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
// 
//      http://www.apache.org/licenses/LICENSE-2.0
// 
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

using System.Runtime.CompilerServices;

using static System.Buffers.Binary.BinaryPrimitives;

namespace NKafka.Protocol.Buffers;

public ref partial struct BufferWriter<TBufferWriter>
{
<#
    foreach (var type in new[]
    {
        "Int",
        "UInt",
        "Byte",
        "SByte",
        "Short",
        "UShort",
        "Long",
        "ULong"
    })
    {
        var typeName = type.ToLowerInvariant();
#>

    /// <summary>
    /// Write <#= typeName #> value type to buffer 
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Write<#= type #>(<#= typeName #> value)
    {   
        const int size = sizeof(<#= typeName #>);
        ref var destPointer = ref GetSpanReference(size);
        if (BitConverter.IsLittleEndian)
        {
            value = ReverseEndianness(value);
        }
        Unsafe.WriteUnaligned(ref destPointer, value);
        Advance(size);
    }
<#
    }
#>

}
