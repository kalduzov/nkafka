//  This is an independent project of an individual developer. Dear PVS-Studio, please check it.
// 
//  PVS-Studio Static Code Analyzer for C, C++, C#, and Java: https://pvs-studio.com
// 
//  Copyright ©  2022 Aleksey Kalduzov. All rights reserved
// 
//  Author: Aleksey Kalduzov
//  Email: alexei.kalduzov@gmail.com
// 
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
// 
//      https://www.apache.org/licenses/LICENSE-2.0
// 
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
// <auto-generated> THIS CODE IS AUTOMATICALLY GENERATED.  DO NOT EDIT. </auto-generated>

// ReSharper disable RedundantUsingDirective
// ReSharper disable UnusedType.Global
// ReSharper disable UnusedMember.Global
// ReSharper disable ClassNeverInstantiated.Global
// ReSharper disable PartialTypeWithSinglePart

#nullable enable

using NKafka.Exceptions;
using NKafka.Messages;

namespace NKafka.Protocol;

internal static partial class RequestBuilder
{
    public static IRequestMessage Build(ApiKeys apiKey, ApiVersion apiVersion, byte[] span)
    {
        var reader = new BufferReader(span);
        var headerVersion = apiKey.GetRequestHeaderVersion(apiVersion);
        ProcessHeader(reader, headerVersion);
        return apiKey switch
        {
            ApiKeys.AddOffsetsToTxn => new AddOffsetsToTxnRequestMessage(reader, apiVersion),
            ApiKeys.AddPartitionsToTxn => new AddPartitionsToTxnRequestMessage(reader, apiVersion),
            ApiKeys.AllocateProducerIds => new AllocateProducerIdsRequestMessage(reader, apiVersion),
            ApiKeys.AlterClientQuotas => new AlterClientQuotasRequestMessage(reader, apiVersion),
            ApiKeys.AlterConfigs => new AlterConfigsRequestMessage(reader, apiVersion),
            ApiKeys.AlterPartitionReassignments => new AlterPartitionReassignmentsRequestMessage(reader, apiVersion),
            ApiKeys.AlterPartition => new AlterPartitionRequestMessage(reader, apiVersion),
            ApiKeys.AlterReplicaLogDirs => new AlterReplicaLogDirsRequestMessage(reader, apiVersion),
            ApiKeys.AlterUserScramCredentials => new AlterUserScramCredentialsRequestMessage(reader, apiVersion),
            ApiKeys.ApiVersions => new ApiVersionsRequestMessage(reader, apiVersion),
            ApiKeys.BeginQuorumEpoch => new BeginQuorumEpochRequestMessage(reader, apiVersion),
            ApiKeys.BrokerHeartbeat => new BrokerHeartbeatRequestMessage(reader, apiVersion),
            ApiKeys.BrokerRegistration => new BrokerRegistrationRequestMessage(reader, apiVersion),
            ApiKeys.ControlledShutdown => new ControlledShutdownRequestMessage(reader, apiVersion),
            ApiKeys.CreateAcls => new CreateAclsRequestMessage(reader, apiVersion),
            ApiKeys.CreateDelegationToken => new CreateDelegationTokenRequestMessage(reader, apiVersion),
            ApiKeys.CreatePartitions => new CreatePartitionsRequestMessage(reader, apiVersion),
            ApiKeys.CreateTopics => new CreateTopicsRequestMessage(reader, apiVersion),
            ApiKeys.DeleteAcls => new DeleteAclsRequestMessage(reader, apiVersion),
            ApiKeys.DeleteGroups => new DeleteGroupsRequestMessage(reader, apiVersion),
            ApiKeys.DeleteRecords => new DeleteRecordsRequestMessage(reader, apiVersion),
            ApiKeys.DeleteTopics => new DeleteTopicsRequestMessage(reader, apiVersion),
            ApiKeys.DescribeAcls => new DescribeAclsRequestMessage(reader, apiVersion),
            ApiKeys.DescribeClientQuotas => new DescribeClientQuotasRequestMessage(reader, apiVersion),
            ApiKeys.DescribeCluster => new DescribeClusterRequestMessage(reader, apiVersion),
            ApiKeys.DescribeConfigs => new DescribeConfigsRequestMessage(reader, apiVersion),
            ApiKeys.DescribeDelegationToken => new DescribeDelegationTokenRequestMessage(reader, apiVersion),
            ApiKeys.DescribeGroups => new DescribeGroupsRequestMessage(reader, apiVersion),
            ApiKeys.DescribeLogDirs => new DescribeLogDirsRequestMessage(reader, apiVersion),
            ApiKeys.DescribeProducers => new DescribeProducersRequestMessage(reader, apiVersion),
            ApiKeys.DescribeQuorum => new DescribeQuorumRequestMessage(reader, apiVersion),
            ApiKeys.DescribeTransactions => new DescribeTransactionsRequestMessage(reader, apiVersion),
            ApiKeys.DescribeUserScramCredentials => new DescribeUserScramCredentialsRequestMessage(reader, apiVersion),
            ApiKeys.ElectLeaders => new ElectLeadersRequestMessage(reader, apiVersion),
            ApiKeys.EndQuorumEpoch => new EndQuorumEpochRequestMessage(reader, apiVersion),
            ApiKeys.EndTxn => new EndTxnRequestMessage(reader, apiVersion),
            ApiKeys.Envelope => new EnvelopeRequestMessage(reader, apiVersion),
            ApiKeys.ExpireDelegationToken => new ExpireDelegationTokenRequestMessage(reader, apiVersion),
            ApiKeys.Fetch => new FetchRequestMessage(reader, apiVersion),
            ApiKeys.FetchSnapshot => new FetchSnapshotRequestMessage(reader, apiVersion),
            ApiKeys.FindCoordinator => new FindCoordinatorRequestMessage(reader, apiVersion),
            ApiKeys.Heartbeat => new HeartbeatRequestMessage(reader, apiVersion),
            ApiKeys.IncrementalAlterConfigs => new IncrementalAlterConfigsRequestMessage(reader, apiVersion),
            ApiKeys.InitProducerId => new InitProducerIdRequestMessage(reader, apiVersion),
            ApiKeys.JoinGroup => new JoinGroupRequestMessage(reader, apiVersion),
            ApiKeys.LeaderAndIsr => new LeaderAndIsrRequestMessage(reader, apiVersion),
            ApiKeys.LeaveGroup => new LeaveGroupRequestMessage(reader, apiVersion),
            ApiKeys.ListGroups => new ListGroupsRequestMessage(reader, apiVersion),
            ApiKeys.ListOffsets => new ListOffsetsRequestMessage(reader, apiVersion),
            ApiKeys.ListPartitionReassignments => new ListPartitionReassignmentsRequestMessage(reader, apiVersion),
            ApiKeys.ListTransactions => new ListTransactionsRequestMessage(reader, apiVersion),
            ApiKeys.Metadata => new MetadataRequestMessage(reader, apiVersion),
            ApiKeys.OffsetCommit => new OffsetCommitRequestMessage(reader, apiVersion),
            ApiKeys.OffsetDelete => new OffsetDeleteRequestMessage(reader, apiVersion),
            ApiKeys.OffsetFetch => new OffsetFetchRequestMessage(reader, apiVersion),
            ApiKeys.OffsetForLeaderEpoch => new OffsetForLeaderEpochRequestMessage(reader, apiVersion),
            ApiKeys.Produce => new ProduceRequestMessage(reader, apiVersion),
            ApiKeys.RenewDelegationToken => new RenewDelegationTokenRequestMessage(reader, apiVersion),
            ApiKeys.SaslAuthenticate => new SaslAuthenticateRequestMessage(reader, apiVersion),
            ApiKeys.SaslHandshake => new SaslHandshakeRequestMessage(reader, apiVersion),
            ApiKeys.StopReplica => new StopReplicaRequestMessage(reader, apiVersion),
            ApiKeys.SyncGroup => new SyncGroupRequestMessage(reader, apiVersion),
            ApiKeys.TxnOffsetCommit => new TxnOffsetCommitRequestMessage(reader, apiVersion),
            ApiKeys.UnregisterBroker => new UnregisterBrokerRequestMessage(reader, apiVersion),
            ApiKeys.UpdateFeatures => new UpdateFeaturesRequestMessage(reader, apiVersion),
            ApiKeys.UpdateMetadata => new UpdateMetadataRequestMessage(reader, apiVersion),
            ApiKeys.Vote => new VoteRequestMessage(reader, apiVersion),
            ApiKeys.WriteTxnMarkers => new WriteTxnMarkersRequestMessage(reader, apiVersion),
            _ => throw new UnsupportedVersionException($"Unsupported API key {apiKey}")
        };
    }
}
