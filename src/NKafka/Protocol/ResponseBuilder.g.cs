//  This is an independent project of an individual developer. Dear PVS-Studio, please check it.
// 
//  PVS-Studio Static Code Analyzer for C, C++, C#, and Java: https://pvs-studio.com
// 
//  Copyright ©  2022 Aleksey Kalduzov. All rights reserved
// 
//  Author: Aleksey Kalduzov
//  Email: alexei.kalduzov@gmail.com
// 
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
// 
//      https://www.apache.org/licenses/LICENSE-2.0
// 
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
// <auto-generated> THIS CODE IS AUTOMATICALLY GENERATED.  DO NOT EDIT. </auto-generated>

// ReSharper disable RedundantUsingDirective
// ReSharper disable UnusedType.Global
// ReSharper disable UnusedMember.Global
// ReSharper disable ClassNeverInstantiated.Global
// ReSharper disable PartialTypeWithSinglePart

#nullable enable

using NKafka.Exceptions;
using NKafka.Messages;

namespace NKafka.Protocol;

internal static partial class ResponseBuilder
{
    public static IResponseMessage Build(ApiKeys apiKey, ApiVersion apiVersion, byte[] span)
    {
        var reader = new BufferReader(span);
        var headerVersion = apiKey.GetResponseHeaderVersion(apiVersion);
        ProcessHeader(reader, headerVersion);
        return apiKey switch
        {
            ApiKeys.AddOffsetsToTxn => new AddOffsetsToTxnResponseMessage(reader, apiVersion),
            ApiKeys.AddPartitionsToTxn => new AddPartitionsToTxnResponseMessage(reader, apiVersion),
            ApiKeys.AllocateProducerIds => new AllocateProducerIdsResponseMessage(reader, apiVersion),
            ApiKeys.AlterClientQuotas => new AlterClientQuotasResponseMessage(reader, apiVersion),
            ApiKeys.AlterConfigs => new AlterConfigsResponseMessage(reader, apiVersion),
            ApiKeys.AlterPartitionReassignments => new AlterPartitionReassignmentsResponseMessage(reader, apiVersion),
            ApiKeys.AlterPartition => new AlterPartitionResponseMessage(reader, apiVersion),
            ApiKeys.AlterReplicaLogDirs => new AlterReplicaLogDirsResponseMessage(reader, apiVersion),
            ApiKeys.AlterUserScramCredentials => new AlterUserScramCredentialsResponseMessage(reader, apiVersion),
            ApiKeys.ApiVersions => new ApiVersionsResponseMessage(reader, apiVersion),
            ApiKeys.BeginQuorumEpoch => new BeginQuorumEpochResponseMessage(reader, apiVersion),
            ApiKeys.BrokerHeartbeat => new BrokerHeartbeatResponseMessage(reader, apiVersion),
            ApiKeys.BrokerRegistration => new BrokerRegistrationResponseMessage(reader, apiVersion),
            ApiKeys.ControlledShutdown => new ControlledShutdownResponseMessage(reader, apiVersion),
            ApiKeys.CreateAcls => new CreateAclsResponseMessage(reader, apiVersion),
            ApiKeys.CreateDelegationToken => new CreateDelegationTokenResponseMessage(reader, apiVersion),
            ApiKeys.CreatePartitions => new CreatePartitionsResponseMessage(reader, apiVersion),
            ApiKeys.CreateTopics => new CreateTopicsResponseMessage(reader, apiVersion),
            ApiKeys.DeleteAcls => new DeleteAclsResponseMessage(reader, apiVersion),
            ApiKeys.DeleteGroups => new DeleteGroupsResponseMessage(reader, apiVersion),
            ApiKeys.DeleteRecords => new DeleteRecordsResponseMessage(reader, apiVersion),
            ApiKeys.DeleteTopics => new DeleteTopicsResponseMessage(reader, apiVersion),
            ApiKeys.DescribeAcls => new DescribeAclsResponseMessage(reader, apiVersion),
            ApiKeys.DescribeClientQuotas => new DescribeClientQuotasResponseMessage(reader, apiVersion),
            ApiKeys.DescribeCluster => new DescribeClusterResponseMessage(reader, apiVersion),
            ApiKeys.DescribeConfigs => new DescribeConfigsResponseMessage(reader, apiVersion),
            ApiKeys.DescribeDelegationToken => new DescribeDelegationTokenResponseMessage(reader, apiVersion),
            ApiKeys.DescribeGroups => new DescribeGroupsResponseMessage(reader, apiVersion),
            ApiKeys.DescribeLogDirs => new DescribeLogDirsResponseMessage(reader, apiVersion),
            ApiKeys.DescribeProducers => new DescribeProducersResponseMessage(reader, apiVersion),
            ApiKeys.DescribeQuorum => new DescribeQuorumResponseMessage(reader, apiVersion),
            ApiKeys.DescribeTransactions => new DescribeTransactionsResponseMessage(reader, apiVersion),
            ApiKeys.DescribeUserScramCredentials => new DescribeUserScramCredentialsResponseMessage(reader, apiVersion),
            ApiKeys.ElectLeaders => new ElectLeadersResponseMessage(reader, apiVersion),
            ApiKeys.EndQuorumEpoch => new EndQuorumEpochResponseMessage(reader, apiVersion),
            ApiKeys.EndTxn => new EndTxnResponseMessage(reader, apiVersion),
            ApiKeys.Envelope => new EnvelopeResponseMessage(reader, apiVersion),
            ApiKeys.ExpireDelegationToken => new ExpireDelegationTokenResponseMessage(reader, apiVersion),
            ApiKeys.Fetch => new FetchResponseMessage(reader, apiVersion),
            ApiKeys.FetchSnapshot => new FetchSnapshotResponseMessage(reader, apiVersion),
            ApiKeys.FindCoordinator => new FindCoordinatorResponseMessage(reader, apiVersion),
            ApiKeys.Heartbeat => new HeartbeatResponseMessage(reader, apiVersion),
            ApiKeys.IncrementalAlterConfigs => new IncrementalAlterConfigsResponseMessage(reader, apiVersion),
            ApiKeys.InitProducerId => new InitProducerIdResponseMessage(reader, apiVersion),
            ApiKeys.JoinGroup => new JoinGroupResponseMessage(reader, apiVersion),
            ApiKeys.LeaderAndIsr => new LeaderAndIsrResponseMessage(reader, apiVersion),
            ApiKeys.LeaveGroup => new LeaveGroupResponseMessage(reader, apiVersion),
            ApiKeys.ListGroups => new ListGroupsResponseMessage(reader, apiVersion),
            ApiKeys.ListOffsets => new ListOffsetsResponseMessage(reader, apiVersion),
            ApiKeys.ListPartitionReassignments => new ListPartitionReassignmentsResponseMessage(reader, apiVersion),
            ApiKeys.ListTransactions => new ListTransactionsResponseMessage(reader, apiVersion),
            ApiKeys.Metadata => new MetadataResponseMessage(reader, apiVersion),
            ApiKeys.OffsetCommit => new OffsetCommitResponseMessage(reader, apiVersion),
            ApiKeys.OffsetDelete => new OffsetDeleteResponseMessage(reader, apiVersion),
            ApiKeys.OffsetFetch => new OffsetFetchResponseMessage(reader, apiVersion),
            ApiKeys.OffsetForLeaderEpoch => new OffsetForLeaderEpochResponseMessage(reader, apiVersion),
            ApiKeys.Produce => new ProduceResponseMessage(reader, apiVersion),
            ApiKeys.RenewDelegationToken => new RenewDelegationTokenResponseMessage(reader, apiVersion),
            ApiKeys.SaslAuthenticate => new SaslAuthenticateResponseMessage(reader, apiVersion),
            ApiKeys.SaslHandshake => new SaslHandshakeResponseMessage(reader, apiVersion),
            ApiKeys.StopReplica => new StopReplicaResponseMessage(reader, apiVersion),
            ApiKeys.SyncGroup => new SyncGroupResponseMessage(reader, apiVersion),
            ApiKeys.TxnOffsetCommit => new TxnOffsetCommitResponseMessage(reader, apiVersion),
            ApiKeys.UnregisterBroker => new UnregisterBrokerResponseMessage(reader, apiVersion),
            ApiKeys.UpdateFeatures => new UpdateFeaturesResponseMessage(reader, apiVersion),
            ApiKeys.UpdateMetadata => new UpdateMetadataResponseMessage(reader, apiVersion),
            ApiKeys.Vote => new VoteResponseMessage(reader, apiVersion),
            ApiKeys.WriteTxnMarkers => new WriteTxnMarkersResponseMessage(reader, apiVersion),
            _ => throw new UnsupportedVersionException($"Unsupported API key {apiKey}")
        };
    }
}
