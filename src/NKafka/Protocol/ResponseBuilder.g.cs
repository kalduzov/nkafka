//  This is an independent project of an individual developer. Dear PVS-Studio, please check it.
// 
//  PVS-Studio Static Code Analyzer for C, C++, C#, and Java: https://pvs-studio.com
// 
//  Copyright ©  2022 Aleksey Kalduzov. All rights reserved
// 
//  Author: Aleksey Kalduzov
//  Email: alexei.kalduzov@gmail.com
// 
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
// 
//      https://www.apache.org/licenses/LICENSE-2.0
// 
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
// <auto-generated> THIS CODE IS AUTOMATICALLY GENERATED.  DO NOT EDIT. </auto-generated>

// ReSharper disable RedundantUsingDirective
// ReSharper disable UnusedType.Global
// ReSharper disable UnusedMember.Global
// ReSharper disable ClassNeverInstantiated.Global
// ReSharper disable PartialTypeWithSinglePart

#nullable enable

using NKafka.Exceptions;
using NKafka.Messages;
using NKafka.Protocol.Buffers;

namespace NKafka.Protocol;

internal static partial class ResponseBuilder
{
    public static IResponseMessage Build(ApiKeys apiKey, ApiVersion apiVersion, byte[] span, int bodyLen)
    {
        var reader = new BufferReader(span, bodyLen);
        var headerVersion = apiKey.GetResponseHeaderVersion(apiVersion);
        ProcessHeader(ref reader, headerVersion);
        return apiKey switch
        {
            ApiKeys.AddOffsetsToTxn => new AddOffsetsToTxnResponseMessage(ref reader, apiVersion),
            ApiKeys.AddPartitionsToTxn => new AddPartitionsToTxnResponseMessage(ref reader, apiVersion),
            ApiKeys.AlterConfigs => new AlterConfigsResponseMessage(ref reader, apiVersion),
            ApiKeys.AlterUserScramCredentials => new AlterUserScramCredentialsResponseMessage(ref reader, apiVersion),
            ApiKeys.ApiVersions => new ApiVersionsResponseMessage(ref reader, apiVersion),
            ApiKeys.CreateAcls => new CreateAclsResponseMessage(ref reader, apiVersion),
            ApiKeys.CreatePartitions => new CreatePartitionsResponseMessage(ref reader, apiVersion),
            ApiKeys.CreateTopics => new CreateTopicsResponseMessage(ref reader, apiVersion),
            ApiKeys.DeleteAcls => new DeleteAclsResponseMessage(ref reader, apiVersion),
            ApiKeys.DeleteGroups => new DeleteGroupsResponseMessage(ref reader, apiVersion),
            ApiKeys.DeleteRecords => new DeleteRecordsResponseMessage(ref reader, apiVersion),
            ApiKeys.DeleteTopics => new DeleteTopicsResponseMessage(ref reader, apiVersion),
            ApiKeys.DescribeAcls => new DescribeAclsResponseMessage(ref reader, apiVersion),
            ApiKeys.DescribeConfigs => new DescribeConfigsResponseMessage(ref reader, apiVersion),
            ApiKeys.DescribeGroups => new DescribeGroupsResponseMessage(ref reader, apiVersion),
            ApiKeys.DescribeUserScramCredentials => new DescribeUserScramCredentialsResponseMessage(ref reader, apiVersion),
            ApiKeys.EndTxn => new EndTxnResponseMessage(ref reader, apiVersion),
            ApiKeys.Fetch => new FetchResponseMessage(ref reader, apiVersion),
            ApiKeys.FetchSnapshot => new FetchSnapshotResponseMessage(ref reader, apiVersion),
            ApiKeys.FindCoordinator => new FindCoordinatorResponseMessage(ref reader, apiVersion),
            ApiKeys.Heartbeat => new HeartbeatResponseMessage(ref reader, apiVersion),
            ApiKeys.IncrementalAlterConfigs => new IncrementalAlterConfigsResponseMessage(ref reader, apiVersion),
            ApiKeys.InitProducerId => new InitProducerIdResponseMessage(ref reader, apiVersion),
            ApiKeys.JoinGroup => new JoinGroupResponseMessage(ref reader, apiVersion),
            ApiKeys.LeaveGroup => new LeaveGroupResponseMessage(ref reader, apiVersion),
            ApiKeys.ListGroups => new ListGroupsResponseMessage(ref reader, apiVersion),
            ApiKeys.ListOffsets => new ListOffsetsResponseMessage(ref reader, apiVersion),
            ApiKeys.Metadata => new MetadataResponseMessage(ref reader, apiVersion),
            ApiKeys.OffsetCommit => new OffsetCommitResponseMessage(ref reader, apiVersion),
            ApiKeys.OffsetDelete => new OffsetDeleteResponseMessage(ref reader, apiVersion),
            ApiKeys.OffsetFetch => new OffsetFetchResponseMessage(ref reader, apiVersion),
            ApiKeys.OffsetForLeaderEpoch => new OffsetForLeaderEpochResponseMessage(ref reader, apiVersion),
            ApiKeys.Produce => new ProduceResponseMessage(ref reader, apiVersion),
            ApiKeys.SaslAuthenticate => new SaslAuthenticateResponseMessage(ref reader, apiVersion),
            ApiKeys.SaslHandshake => new SaslHandshakeResponseMessage(ref reader, apiVersion),
            ApiKeys.SyncGroup => new SyncGroupResponseMessage(ref reader, apiVersion),
            ApiKeys.TxnOffsetCommit => new TxnOffsetCommitResponseMessage(ref reader, apiVersion),
            _ => throw new UnsupportedVersionException($"Unsupported API key {apiKey}")
        };
    }
}
