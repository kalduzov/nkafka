<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var testCases = new Dictionary<string, List<(object,object)>>
    {
        ["Long"] = new()
        {
            (0, "0000000000000000"),
            (1, "0000000000000001"),
            ("long.MaxValue", "7FFFFFFFFFFFFFFF"),
            ("long.MinValue", "8000000000000000")
        },
        ["Int"] = new()
        {
            (0, "00000000"),
            (1, "00000001"),
            ("int.MaxValue", "7FFFFFFF"),
            ("int.MinValue", "80000000")
        },
        ["Short"] = new()
        {
            (0, "0000"),
            (1, "0001"),
            ("short.MaxValue", "7FFF"),
            ("short.MinValue", "8000")
        },
        ["Double"] = new()
        {
            (0, "0000000000000000"),
            (1, "3ff0000000000000"),
            ("double.MaxValue", "7FEFFFFFFFFFFFFF"),
        },
        ["Float"] = new()
        {
            (0, "00000000"),
            (1, "3f800000"),
            ("float.MaxValue", "7F7FFFFF"),
        }
    };
#>
//  This is an independent project of an individual developer. Dear PVS-Studio, please check it.
// 
//  PVS-Studio Static Code Analyzer for C, C++, C#, and Java: https://pvs-studio.com
// 
//  Copyright Â©  2023 Aleksey Kalduzov. All rights reserved
// 
//  Author: Aleksey Kalduzov
//  Email: alexei.kalduzov@gmail.com
// 
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
// 
//      http://www.apache.org/licenses/LICENSE-2.0
// 
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
using NKafka.Serialization;

namespace NKafka.Tests.Serialization;

public partial class SerializerDeserializerTests
{
<#
    foreach (var serializerType in new[]
    {
        "Int",
        "Long",
        "Short",
        "Double",
        "Float",
    })
    {
        var clrTypeName = serializerType;
        if (serializerType != "Guid")
        {
            clrTypeName = serializerType.ToLowerInvariant();
        }
#>

#region <#= clrTypeName #> serialization test

    [Theory]
<#
        if (testCases.TryGetValue(serializerType, out var cases))
        {
            foreach (var c in cases)
            {
#>
    [InlineData(<#= c.Item1 #>, "<#= c.Item2 #>")]
<#
            }
        }
#>    public async Task Serialize<#= serializerType #>Async_Successful(<#= clrTypeName #> value, string serializeValueAsByteString)
    {
        var serializeValue = Convert.FromHexString(serializeValueAsByteString);
        IAsyncSerializer<<#= clrTypeName #>> serializer = new <#= serializerType #>Serializer();
        var result = await serializer.SerializeAsync(value);

        result.Should().BeEquivalentTo(serializeValue);
    }


    [Theory]
<#
        if (testCases.TryGetValue(serializerType, out cases))
        {
            foreach (var c in cases)
            {
#>
    [InlineData(<#= c.Item1 #>, "<#= c.Item2 #>")]
<#
            }
        }
#>    public void Serialize<#= serializerType #>_Successful(<#= clrTypeName #> value, string serializeValueAsByteString)
    {
        var serializeValue = Convert.FromHexString(serializeValueAsByteString);
        IAsyncSerializer<<#= clrTypeName #>> serializer = new <#= serializerType #>Serializer();
        var result = serializer.Serialize(value);

        result.Should().BeEquivalentTo(serializeValue);
    }

    [Theory]
<#
        if (testCases.TryGetValue(serializerType, out cases))
        {
            foreach (var c in cases)
            {
#>
    [InlineData(<#= c.Item1 #>, "<#= c.Item2 #>")]
<#
            }
        }
#>    public async Task Deserialize<#= serializerType #>Async_Successful(<#= clrTypeName #> value, string deserializeValueAsByteString)
    {
        var deserializeValue = Convert.FromHexString(deserializeValueAsByteString);
        IAsyncDeserializer<<#= clrTypeName #>> deserializer = new <#= serializerType #>Deserializer();
        var result = await deserializer.DeserializeAsync(deserializeValue);

        result.Should().Be(value);
    }

    [Theory]
<#
        if (testCases.TryGetValue(serializerType, out cases))
        {
            foreach (var c in cases)
            {
#>
    [InlineData(<#= c.Item1 #>, "<#= c.Item2 #>")]
<#
            }
        }
#>    public void Deserialize<#= serializerType #>_Successful(<#= clrTypeName #> value, string deserializeValueAsByteString)
    {
        var deserializeValue = Convert.FromHexString(deserializeValueAsByteString);
        IAsyncDeserializer<<#= clrTypeName #>> deserializer = new <#= serializerType #>Deserializer();
        var result = deserializer.Deserialize(deserializeValue);

        result.Should().Be(value);
    }

    [Theory]
<#
        if (testCases.TryGetValue(serializerType, out cases))
        {
            foreach (var c in cases)
            {
#>
    [InlineData(<#= c.Item1 #>)]
<#
            }
        }
#>    public void SerializeDeserialize<#= serializerType #>_Successful(<#= clrTypeName #> value)
    {
        IAsyncSerializer<<#= clrTypeName #>> serializer = new <#= serializerType #>Serializer();
        var serializeValue = serializer.Serialize(value);
 
        IAsyncDeserializer<<#= clrTypeName #>> deserializer = new <#= serializerType #>Deserializer();
        var deserializeValue = deserializer.Deserialize(serializeValue);

        value.Should().Be(deserializeValue);
    }
#endregion
<#
    }
#>

}